# Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.
# Note: A palindrome string is a string that reads the same backward as forward.

# Examples:
# Example 1:
# Input: s = “aab”
# Output: [ ["a","a","b"], ["aa","b"] ]	
# Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

# Example 2:
# Input: s = “aabb”
# Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 

# Time Complexity: O( (2^n) *k*(n/2) )
# Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

# Space Complexity: O(k * x)
# Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).

def partition(self, s: str) -> List[List[str]]:
    def pel(idx,ans):
        if idx == len(s):
            result.append(ans[::])
            return
        for i in range(idx,len(s)):
            word = s[idx:i+1]
            if word == word[::-1]:
                ans.append(word)
                pel(i+1,ans)
                ans.pop()
    result = []
    pel(0,[])
    return result